type Query {
  hello: String
  getResources: [Resource]
  getResource(id: ID!): Resource
  getShifts: [Shift]
  getShift(id: ID!): Shift
  getBreaks: [Break]
}

type Mutation {
  createResource(input: ResourceInput!): Resource
  createShift(input: ShiftInput!): Shift
  createBreak(input: BreakInput!): Break
  assignBreakToShift(shiftId: ID!, breakId: ID!): Shift
  assignShiftToResource(resourceId: ID!, shiftId: ID!): Resource
  assignAlternativeShiftToResource(
    resourceId: ID!
    shiftId: ID!
    startDate: String
    endDate: String
  ): Resource
  deleteBreak(id: ID!): Break
  deleteBreakFromShift(shiftId: ID!, breakId: ID!): Shift
}

type Resource {
  id: ID!
  name: String!
  description: String
  color: String
  picture: String
  external_code: String
  orders: [Order]
  regularShift: Shift
  alternateShifts: [AlternativeShift]
  restrictions: [Restriction]
}

type Order {
  id: ID!
  orderNumber: String!
}

type Shift {
  id: ID!
  name: String!
  startHour: String!
  endHour: String!
  breaks: [Break]
  resources: [Resource]
}

type AlternativeShift {
  id: ID!
  shiftId: ID!
  shift: Shift
  resourceId: Resource!
  startDate: String!
  endDate: String!
}
type Restriction {
  id: ID!
  name: String!
  description: String
}

type Break {
  id: ID!
  name: String!
  startHour: String!
  endHour: String!
}

input ResourceInput {
  name: String!
  description: String
  color: String
  picture: String
  regularShiftId: ID
}

input ShiftInput {
  name: String!
  startHour: String!
  endHour: String!
}

input BreakInput {
  name: String!
  startHour: String!
  endHour: String!
}
