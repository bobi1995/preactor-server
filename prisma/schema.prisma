generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Resource {
  id                 String                     @id @default(cuid()) // Replace cuid() with nanoid in application logic
  name               String
  description        String?
  picture            String?
  color              String?
  scheduleId         String?
  external_code      String?
  schedule           WeekSchedule?              @relation("ResourceSchedule", fields: [scheduleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  alternateShifts    AlternativeShift[]
  restrictions       REL_Restriction_Resource[] // Many-to-many via join table
  orders             Order[]                    @relation("ResourceOrders")
  REL_group_resource REL_group_resource[]
}

model Group {
  id                 String               @id @default(cuid()) // Replace cuid() with nanoid in application logic
  name               String
  description        String?
  REL_group_resource REL_group_resource[]
}

model Order {
  id          String    @id @default(cuid()) // Replace cuid() with nanoid in application logic
  orderNumber String
  resource    Resource? @relation("ResourceOrders", fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId  String?
}

model Shift {
  id              String             @id @default(cuid()) // Replace cuid() with nanoid in application logic
  name            String
  startHour       String
  endHour         String
  alternateShifts AlternativeShift[]
  breaks          REL_Break_Shift[] // Many-to-many via join table
}

model Break {
  id        String            @id @default(cuid())
  name      String
  startHour String
  endHour   String
  shifts    REL_Break_Shift[] // Many-to-many via join table
}

model Restriction {
  id          String                     @id @default(cuid()) // Replace cuid() with nanoid in application logic
  name        String
  description String?
  resources   REL_Restriction_Resource[]
}

model REL_group_resource {
  id         String   @id @default(cuid())
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
}

model REL_Restriction_Resource {
  id            String      @id @default(cuid())
  resource      Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId    String
  restriction   Restriction @relation(fields: [restrictionId], references: [id], onDelete: Cascade)
  restrictionId String
}

model AlternativeShift {
  id         String   @id @default(cuid()) // Replace cuid() with nanoid in application logic
  shift      Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  shiftId    String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  startDate  String
  endDate    String
}

model REL_Break_Shift {
  id      String @id @default(cuid())
  shift   Shift  @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  shiftId String
  break   Break  @relation(fields: [breakId], references: [id], onDelete: Cascade)
  breakId String
}

model WeekSchedule {
  id               String     @id @default(cuid()) // Replace cuid() with nanoid in application logic
  name             String     @unique
  mondayShiftId    String?
  tuesdayShiftId   String?
  wednesdayShiftId String?
  thursdayShiftId  String?
  fridayShiftId    String?
  saturdayShiftId  String?
  sundayShiftId    String?
  resources        Resource[] @relation("ResourceSchedule")
}
