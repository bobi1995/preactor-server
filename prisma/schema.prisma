generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Orders {
  id                Int     @id @default(autoincrement())
  OrderNo           String? // Assuming OrderNo can be alphanumeric or just a number string
  OpNo              String? // Assuming OpNo can be alphanumeric or just a number string
  Resource          String  @unique // This is the foreign key to Resource.external_code
  StartTime         String?
  EndTime           String?
  Project           String?
  Duration          String? // Assuming duration is in some integer unit (e.g., minutes, seconds)
  Start_min         String?
  End_min           String?
  TaskIndex         String?
  PartNo            String?
  Product           String?
  OpName            String?
  ResourceGroup     String?
  RemainingQuantity String?
  SetupTime         String? // Assuming setup time is in some integer unit

  ResourceRelation Resource @relation(fields: [Resource], references: [external_code])

  @@index([Resource]) // Add an index for the foreign key field
}

model Resource {
  id             Int     @id @default(autoincrement())
  name           String?
  description    String?
  picture        String? // Assuming this might be a URL or path to an image
  color          String?
  regularShiftId Int?
  external_code  String  @unique // Key for relation with Orders.Resource

  Orders            Orders? // One-to-one relation from Resource back to Orders
  Shift             Shift?             @relation(fields: [regularShiftId], references: [id])
  AlternativeShifts AlternativeShift[]

  @@index([regularShiftId])
}

model Shift {
  id                Int                @id @default(autoincrement())
  name              String?
  startHour         String? // Consider DateTime or Int if you store specific times or hour numbers
  endHour           String? // Consider DateTime or Int
  Resources         Resource[]
  RelBreakShifts    REL_Break_Shift[]
  AlternativeShifts AlternativeShift[]
}

model Break {
  id             Int               @id @default(autoincrement())
  name           String?
  startHour      String? // Consider DateTime or Int
  endHour        String? // Consider DateTime or Int
  RelBreakShifts REL_Break_Shift[]
}

model REL_Break_Shift {
  id      Int @id @default(autoincrement())
  shiftId Int
  breakId Int

  Shift Shift @relation(fields: [shiftId], references: [id])
  Break Break @relation(fields: [breakId], references: [id])

  @@unique([shiftId, breakId]) // Assuming a break can only be associated with a shift once
  @@index([shiftId])
  @@index([breakId])
}

model AlternativeShift {
  id         Int       @id @default(autoincrement())
  shiftId    Int
  resourceId Int
  startDate  DateTime?
  endDate    DateTime?

  Shift    Shift    @relation(fields: [shiftId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Resource Resource @relation(fields: [resourceId], references: [id])

  @@index([shiftId])
  @@index([resourceId])
}
